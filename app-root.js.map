{"version":3,"file":"app-root.js","sourceRoot":"","sources":["src/app-root.ts"],"names":[],"mappings":";;;;;;AAAC,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAG1D,IAAa,OAAO,GAApB,MAAa,OAAQ,SAAQ,UAAU;IAAvC;;QAOE,UAAK,GAAG,CAAC,CAAC;QAUX,wBAAwB;QACxB,mBAAmB;QACnB,2DAA2D;QAC3D,KAAK;QAEJ;;;WAGG;QACJ,oCAAoC;QACpC,8BAA8B;QAC9B,KAAK;IACN,CAAC;IApBU,MAAM;QACb,OAAO,IAAI,CAAA;;;;MAIV,CAAC;IACJ,CAAC;CAcF,CAAA;AA5BiB,cAAM,GAAG,GAAG,CAAA;;;;IAI1B,CAAA;AAEF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sCACf;AAPC,OAAO;IADnB,aAAa,CAAC,UAAU,CAAC;GACb,OAAO,CA6BnB;SA7BY,OAAO","sourcesContent":[" import {LitElement, html, css} from 'lit';\n import {customElement, property} from 'lit/decorators.js';\n \n @customElement('app-root')\n export class AppRoot extends LitElement {\n   static override styles = css`\n     :host {\n       display: block;\n     }\n   `;\n   @property({type: Number})\n   count = 0;\n \n   override render() {\n     return html`\n       <main>\n        <h1>main works</h1>\n       </main>\n     `;\n   }\n \n  //  private _onClick() {\n  //    this.count++;\n  //    this.dispatchEvent(new CustomEvent('count-changed'));\n  //  }\n \n   /**\n    * Formats a greeting\n    * @param name The name to say \"Hello\" to\n    */\n  //  sayHello(name: string): string {\n  //    return `Hello, ${name}`;\n  //  }\n }\n \n declare global {\n   interface HTMLElementTagNameMap {\n     'app-root': AppRoot;\n   }\n }\n "]}